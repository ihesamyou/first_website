# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  website:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/usr/src/website/
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    image: website
    container_name: website

  db:
    image: postgres:13
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER_FILE=/run/secrets/DJANGODB_USER
      - POSTGRES_PASSWORD_FILE=/run/secrets/DJANGODB_PASS
    secrets: 
      - DJANGODB_USER
      - DJANGODB_PASS
    expose:
      - 5432
    healthcheck:
      test: "pg_isready -U $(cat /run/secrets/DJANGODB_USER)"
      interval: 10s
      timeout: 5s
      retries: 5
    container_name: website-postgres

  redis:
    image: "redis:6.2-alpine"
    container_name: website-redis

  celery:
    build: .
    working_dir: /usr/src/website/personal_website
    command: celery -A personal_website worker -l info
    volumes:
      - .:/usr/src/website/
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      website:
        condition: service_started
    image: website-celery
    container_name: website-celery

  celery-beat:
    build: .
    working_dir: /usr/src/website/personal_website
    command: celery -A personal_website beat -l info
    volumes:
      - .:/usr/src/website/
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      website:
        condition: service_started
      celery:
        condition: service_started
    image: website-celerybeat
    container_name: website-celerybeat

volumes:
  postgres_data:
secrets:
  DJANGODB_USER:
    file: db_user.txt
  DJANGODB_PASS:
    file: db_pass.txt
